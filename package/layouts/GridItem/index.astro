---
import { mergeClasses, parseUnit, parseDualUnit, parseRWD, parseJustify, fullRWD } from '../../utils'
import Container, { type ContainerProps } from '../Container/index.astro'
import Flex, { type FlexProps } from '../../components/Flex/index.astro'

export interface GridItemProps extends FlexProps, ContainerProps {
  col: string
}
interface Props extends GridItemProps {}

const { id, class: className = '', maxWidth = '100%', item = 'stretch', justify = 'center', gap = '0', col, center = false, ...rest } = Astro.props

// RWD尺寸(由大到小排序)
const sizes = ['2xl', 'xl', 'lg', 'md', 'sm', 'xs', '2xs']

// 解析gap
const [rowGap, colGap] = parseDualUnit(gap)

// 解析col
const colMap = fullRWD(parseRWD(col), sizes)

const styleList: Record<string, string> = {
  display: 'contents',
  '--cgap': colGap || '0px',
}
// 設定col數量
Object.entries(colMap).forEach(([key, val]) => {
  styleList[`--col${key === 'default' ? '' : '-' + key}`] = `${val}`
})
const classList = mergeClasses(className, ['ch-grd']).join(' ')
---

<div style={styleList}>
  <Container class=`ch-grd-ctr ${(maxWidth + '').endsWith('px') || +maxWidth ? 'ch-fixed' : ''}` maxWidth={maxWidth} center={center}>
    <Flex id={id} class={classList} wrap item={item} justify={justify} gap={parseUnit(gap)} {...rest}><slot /></Flex>
  </Container>
</div>

<style lang="scss" is:global>
  @use '../../config/breakpoint' as bp;
  .ch-grd {
    & > * {
      max-width: calc((100% - var(--cgap, 0) * max(var(--col-2xl) - 1, 0)) / var(--col-2xl));
    }
  }
  :where(.ch-grd) > * {
    width: 100%;
  }

  // 手動設定和對應尺寸
  $map: 2xl, xl, lg, md, sm, xs, 2xs;

  @each $size in $map {
    @media (max-width: bp.size($size)) {
      .ch-grd-ctr.ch-fixed {
        max-width: calc((var(--mw) - var(--cgap, 0) * max(var(--col) - 1, 0)) / var(--col) * var(--col-#{$size}) + (var(--col-#{$size}) - 1) * var(--cgap, 0));
      }
      .ch-grd > * {
        max-width: calc((100% - var(--cgap, 0) * max(var(--col-#{$size}) - 1, 0)) / var(--col-#{$size}));
      }
    }
  }
</style>
