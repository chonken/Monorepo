---
interface Props {
  id?: string
  class?: string
  item?: 'stretch' | 'start' | 'center' | 'end'
  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | 'space-between' | 'space-around' | 'space-evenly'
  gap?: string | number
  overlay?: string | number
  maxWidth?: number | string
  reverse?: boolean
  mobile?: '2xl' | 'xl' | 'lg' | 'md' | 'sm' | 'none'
  mobileItem?: 'stretch' | 'start' | 'center' | 'end'
  mobileJustify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | 'space-between' | 'space-around' | 'space-evenly'
  mobileFit?: boolean
  mobileReverse?: boolean
  center?: boolean
}
import { mergeClasses, parseDualUnit, parseUnit, parseJustify, toNegative, isNegative } from '../../utils'
import Container from '../Container.astro'
const { id, class: className = '', maxWidth = '100%', item = 'stretch', justify = 'center', gap = '40', overlay: oly = '0', reverse = false, mobile = 'md', mobileItem = 'center', mobileJustify = 'center', mobileFit = false, mobileReverse = false, center = false, ...rest } = Astro.props

const [rowGap, cGap] = parseDualUnit(gap, 'px')

// 處理間距和疊層
const o = toNegative(parseUnit(oly, 'px'))
const overlay = o === '-0px' ? (isNegative(cGap) ? cGap : '0px') : o
const colGap = overlay === '0px' ? cGap : '0px'

const styleList: Record<string, string> = {
  '--itm': item,
  '--jst': parseJustify(justify),
  '--mob-itm': mobileItem,
  '--mob-jst': parseJustify(mobileJustify),
  '--gap': `${rowGap} ${colGap === rowGap ? '' : colGap}`.trim(),
  '--oly': `${overlay}`,
}
const classList = mergeClasses(className, ['ch-l-r', reverse ? 'reverse' : '', ...(mobile === 'none' ? [] : [`mob-${mobile}`, mobileFit ? 'mob-fit' : '', mobileReverse ? 'mob-re' : ''])]).join(' ')
---

<Container id={id} class={classList} styleList={styleList} maxWidth={maxWidth} center={center} {...rest}>
  <slot />
</Container>

<style lang="scss" is:global>
  @use 'sass:list';
  @use '../../config/breakpoint' as bp;
  .ch-l-r {
    display: flex;
    justify-content: var(--jst);
    align-items: var(--itm);
    gap: var(--gap);
    max-width: var(--mw);
    &.reverse {
      flex-direction: row-reverse;
    }
    & > * {
      position: relative;
      z-index: 1;
    }
  }
  :where(.ch-l-r:not(.reverse)) > :last-child {
    margin-left: var(--oly);
  }
  :where(.ch-l-r.reverse) > :last-child {
    margin-right: var(--oly);
  }

  // 手動設定尺寸
  $map: 2xl, xl, lg, md, sm;

  @each $size in $map {
    @media (max-width: bp.size($size)) {
      .ch-l-r.mob-#{$size} {
        flex-direction: column;
        justify-content: var(--mob-jst);
        align-items: var(--mob-itm);
        max-width: 100%;
        &.mob-fit {
          width: fit-content;
        }
        &.mob-re {
          flex-direction: column-reverse;
        }
      }
      :where(.ch-l-r:not(.reverse).mob-#{$size}) > :last-child {
        margin-left: 0;
      }
      :where(.ch-l-r.reverse.mob-#{$size}) > :last-child {
        margin-right: 0;
      }
    }
  }
</style>
