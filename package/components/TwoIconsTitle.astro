---
import type { ElementProps } from '../type/element'
import { mergeClasses, parseMultiUnit } from '../utils'

export interface TwoIconsTitleProps extends ElementProps {
  gap?: string | number
  mobile?: 'md' | 'sm' | 'xs' | '2xl' | 'none'
  mobileKeep?: boolean
}
interface Props extends TwoIconsTitleProps {}

const { id, element = 'div', class: className = '', gap = '20', mobile = 'md', mobileKeep = false, ...rest } = Astro.props

const Element = element as keyof HTMLElement
const styleList = {
  '--gap': parseMultiUnit(gap),
}
const classList = mergeClasses(className, ['ch-tit', ...(mobile === 'none' ? [] : [`mob-${mobile}`, `${mobileKeep ? 'mob-keep' : ''}`])])
---

<Element class:list={classList} style={styleList} {...rest}>
  <div class="ch-tit-i"><slot name="icon" /></div>
  <div class="ch-tit-t"><slot /></div>
  <div class="ch-tit-i">{Astro.slots.has('icon2') ? <slot name="icon2" /> : <slot name="icon" />}</div>
</Element>

<style lang="scss" is:global>
  @use '../config/breakpoint' as bp;
  .ch-tit {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--gap);
  }
  .ch-tit-t {
    flex-shrink: 0;
  }

  $map: (md, sm, xs, 2xl);

  @each $size in $map {
    @media (max-width: bp.size($size)) {
      .ch-tit.mob-#{$size} {
        .ch-tit-i {
          display: none;
        }
      }
      .ch-tit.mob-#{$size}.mob-keep {
        flex-direction: column;
        .ch-tit-i {
          display: block;
        }
      }
    }
  }
</style>
