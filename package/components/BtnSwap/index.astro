---
import type { ButtonProps } from '../../type/button'
import { mergeClasses, parseUnit } from '../../utils'

export interface BtnSwap extends ButtonProps {
  borderColor?: string
  borderRadius?: string | number
  iconHoverInvert?: boolean
  iconReverse?: boolean
}
interface Props extends BtnSwap {}

const { class: className = '', href = '#', backgroundColor = '#000', color = '#fff', borderColor = backgroundColor, borderRadius, iconHoverInvert = false, iconReverse = false, blank = false, ...rest } = Astro.props

const styleList = {
  '--bgc': backgroundColor,
  '--clr': color,
  '--bor': parseUnit(borderColor, 'px'),
  '--brr': borderRadius,
  '--icn-inv': iconHoverInvert ? 1 : 0,
}
const classList = mergeClasses(className, ['ch-btn-swap', iconReverse ? 'ch-icon-re' : ''])
---

<a href={href} class:list={classList} style={styleList} target={blank ? '_blank' : undefined} {...rest}>
  {
    Astro.slots.has('icon') && (
      <span class="ch-icon">
        <slot name="icon" />
      </span>
    )
  }
  <slot>查看更多</slot>
</a>

<style lang="scss" is:global>
  .ch-btn-swap {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
    padding: 0.5em 1.5em;
    text-align: center;
    color: var(--clr);
    line-height: 1.2;
    border-radius: var(--brr, 0);
    border: 1px solid var(--bor);
    background-color: var(--bgc);
    transition: 0.4s;
    & .ch-icon {
      flex-shrink: 0;
      filter: none;
      transition: 0.4s;
    }
    &.ch-icon-re .ch-icon {
      filter: grayscale(1) invert(var(--icn-inv)) brightness(2);
    }
    &:hover {
      color: var(--bgc);
      background-color: var(--clr);
    }
    &:hover .ch-icon {
      filter: grayscale(1) invert(var(--icn-inv)) brightness(2);
    }
    &.ch-icon-re:hover .ch-icon {
      filter: none;
    }
  }
</style>
